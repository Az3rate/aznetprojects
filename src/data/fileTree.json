{
  "src": {
    "name": "src",
    "type": "directory",
    "children": {
      "App.tsx": {
        "name": "App.tsx",
        "type": "file",
        "content": "import React from 'react';\r\nimportttttt { ThemeProvider } from './styles/ThemeProvider';\r\nimport { Terminal } from './components/Terminal/Terminal';\r\nimport { GlobalStyles } from './styles/globalStyles';\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <ThemeProvider>\r\n      <GlobalStyles />\r\n      <Terminal />\r\n    </ThemeProvider>\r\n  );\r\n}; "
      },
      "components": {
        "name": "components",
        "type": "directory",
        "children": {
          "Terminal": {
            "name": "Terminal",
            "type": "directory",
            "children": {
              "ProjectDetails.tsx": {
                "name": "ProjectDetails.tsx",
                "type": "file",
                "content": "import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Project } from '../../types';\r\n\r\nconst DetailsContainer = styled.div`\r\n  padding: 1rem;\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n  font-family: 'Fira Code', monospace;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  color: ${({ theme }) => theme.colors.prompt};\r\n  font-size: 1.5rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Section = styled.div`\r\n  margin-bottom: 1.5rem;\r\n`;\r\n\r\nconst SectionTitle = styled.h2`\r\n  color: ${({ theme }) => theme.colors.link};\r\n  font-size: 1.2rem;\r\n  margin-bottom: 0.5rem;\r\n  border-bottom: 1px solid ${({ theme }) => theme.colors.border};\r\n  padding-bottom: 0.5rem;\r\n`;\r\n\r\nconst Description = styled.p`\r\n  margin-bottom: 1rem;\r\n  line-height: 1.5;\r\n`;\r\n\r\nconst List = styled.ul`\r\n  list-style-type: none;\r\n  padding-left: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst ListItem = styled.li`\r\n  margin-bottom: 0.5rem;\r\n  &:before {\r\n    content: \"•\";\r\n    color: ${({ theme }) => theme.colors.prompt};\r\n    margin-right: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TechStack = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  gap: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst TechItem = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.background.secondary};\r\n  padding: 0.5rem;\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.background.secondary};\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n  border: 1px solid ${({ theme }) => theme.colors.border};\r\n  padding: 0.5rem 1rem;\r\n  cursor: pointer;\r\n  margin-top: 1rem;\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.background.hover};\r\n  }\r\n`;\r\n\r\ninterface ProjectDetailsProps {\r\n  project: Project;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const ProjectDetails: React.FC<ProjectDetailsProps> = ({ project, onClose }) => {\r\n  return (\r\n    <DetailsContainer>\r\n      <Title>{project.name}</Title>\r\n      \r\n      <Section>\r\n        <SectionTitle>Overview</SectionTitle>\r\n        <Description>{project.overview}</Description>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionTitle>Key Features</SectionTitle>\r\n        <List>\r\n          {project.keyFeatures.map((feature, index) => (\r\n            <ListItem key={index}>{feature}</ListItem>\r\n          ))}\r\n        </List>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionTitle>Architecture</SectionTitle>\r\n        <Description>\r\n          <strong>Frontend:</strong> {project.architecture.frontend.framework} ({project.architecture.frontend.language})\r\n          <br />\r\n          <strong>Backend:</strong> {project.architecture.backend.framework} ({project.architecture.backend.language})\r\n        </Description>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionTitle>Tech Stack</SectionTitle>\r\n        <TechStack>\r\n          {project.techStack.map((tech, index) => (\r\n            <TechItem key={index}>\r\n              <strong>{tech.name}</strong> ({tech.version})\r\n              <br />\r\n              {tech.description}\r\n            </TechItem>\r\n          ))}\r\n        </TechStack>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionTitle>Directory Structure</SectionTitle>\r\n        <List>\r\n          {Object.entries(project.directoryStructure).map(([dir, contents]) => (\r\n            <ListItem key={dir}>\r\n              <strong>{dir}/</strong>\r\n              <br />\r\n              {Object.entries(contents).map(([subdir, files]) => (\r\n                <div key={subdir}>\r\n                  &nbsp;&nbsp;{subdir}/: {files.join(', ')}\r\n                </div>\r\n              ))}\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Section>\r\n\r\n      <Section>\r\n        <SectionTitle>API Endpoints</SectionTitle>\r\n        <List>\r\n          {project.apiEndpoints.map((endpoint, index) => (\r\n            <ListItem key={index}>\r\n              <strong>{endpoint.method} {endpoint.path}</strong>\r\n              <br />\r\n              {endpoint.description}\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Section>\r\n\r\n      <CloseButton onClick={onClose}>Close</CloseButton>\r\n    </DetailsContainer>\r\n  );\r\n}; "
              },
              "Terminal.styles.ts": {
                "name": "Terminal.styles.ts",
                "type": "file",
                "content": "import styled from 'styled-components';\r\n\r\nexport const TerminalWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 250px 1fr 400px;\r\n  height: 100vh;\r\n  background-color: ${({ theme }) => theme.colors.background.primary};\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n  font-family: 'Fira Code', monospace;\r\n`;\r\n\r\nexport const Sidebar = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.background.secondary};\r\n  padding: 1rem;\r\n  border-right: 1px solid ${({ theme }) => theme.colors.border};\r\n`;\r\n\r\nexport const TerminalContent = styled.div`\r\n  padding: 1rem;\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const CommandLine = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nexport const Prompt = styled.span`\r\n  color: ${({ theme }) => theme.colors.prompt};\r\n  margin-right: 0.5rem;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  background: transparent;\r\n  border: none;\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n  font-family: 'Fira Code', monospace;\r\n  font-size: 1rem;\r\n  width: 100%;\r\n  outline: none;\r\n  &::placeholder {\r\n    color: ${({ theme }) => theme.colors.text.secondary};\r\n  }\r\n`;\r\n\r\nexport const Output = styled.div<{ type: 'success' | 'error' | 'info' }>`\r\n  margin-bottom: 1rem;\r\n  color: ${({ theme, type }) => {\r\n    switch (type) {\r\n      case 'success':\r\n        return theme.colors.success;\r\n      case 'error':\r\n        return theme.colors.error;\r\n      case 'info':\r\n        return theme.colors.text.primary;\r\n    }\r\n  }};\r\n`;\r\n\r\nexport const CommandInput = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\n\r\nexport const CommandOutput = styled.div`\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport const DetailsPanel = styled.div<{ $isOpen: boolean }>`\r\n  background-color: ${({ theme }) => theme.colors.background.secondary};\r\n  padding: 1rem;\r\n  border-left: 1px solid ${({ theme }) => theme.colors.border};\r\n  transform: translateX(${({ $isOpen }) => ($isOpen ? '0' : '100%')});\r\n  transition: transform 0.3s ease-in-out;\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const DirectoryTree = styled.div`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nexport const DirectoryItem = styled.div<{ $isActive: boolean }>`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background-color: ${({ theme, $isActive }) =>\r\n    $isActive ? theme.colors.background.hover : 'transparent'};\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.background.hover};\r\n  }\r\n`;\r\n\r\nexport const DirectoryIcon = styled.span`\r\n  margin-right: 0.5rem;\r\n`;\r\n\r\nexport const DirectoryName = styled.span`\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n`;\r\n\r\nexport const SuggestionBox = styled.div`\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  right: 0;\r\n  background-color: ${({ theme }) => theme.colors.background.secondary};\r\n  border: 1px solid ${({ theme }) => theme.colors.border};\r\n  border-top: none;\r\n  z-index: 1;\r\n`;\r\n\r\nexport const SuggestionItem = styled.div<{ $isSelected: boolean }>`\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  background-color: ${({ theme, $isSelected }) =>\r\n    $isSelected ? theme.colors.background.hover : 'transparent'};\r\n  &:hover {\r\n    background-color: ${({ theme }) => theme.colors.background.hover};\r\n  }\r\n`;\r\n\r\nexport const ClickableText = styled.span`\r\n  color: ${({ theme }) => theme.colors.link};\r\n  cursor: pointer;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`; "
              },
              "Terminal.tsx": {
                "name": "Terminal.tsx",
                "type": "file",
                "content": "import React, { useState, useRef, useEffect } from 'react';\r\nimport { useTerminal } from '../../hooks/useTerminal';\r\nimport { projects } from '../../data/projects';\r\nimport { WelcomeMessage } from './WelcomeMessage';\r\nimport { ProjectDetails } from './ProjectDetails';\r\nimport { Project } from '../../types';\r\nimport {\r\n  TerminalWrapper,\r\n  Sidebar,\r\n  TerminalContent,\r\n  CommandLine,\r\n  Prompt,\r\n  Input,\r\n  Output,\r\n  CommandInput,\r\n  CommandOutput,\r\n  DetailsPanel,\r\n  DirectoryTree,\r\n  DirectoryItem,\r\n  DirectoryIcon,\r\n  DirectoryName,\r\n  SuggestionBox,\r\n  SuggestionItem,\r\n  ClickableText\r\n} from './Terminal.styles';\r\n\r\nexport const Terminal: React.FC = () => {\r\n  const {\r\n    state,\r\n    executeCommand,\r\n    navigateHistory,\r\n    getCommandSuggestions,\r\n    openDetailsPanel,\r\n    closeDetailsPanel\r\n  } = useTerminal(projects);\r\n\r\n  const [input, setInput] = useState('');\r\n  const [suggestions, setSuggestions] = useState<string[]>([]);\r\n  const [selectedSuggestion, setSelectedSuggestion] = useState(-1);\r\n  const [isFirstTime, setIsFirstTime] = useState(() => {\r\n    const visited = localStorage.getItem('aznet_terminal_visited');\r\n    if (!visited) {\r\n      localStorage.setItem('aznet_terminal_visited', 'true');\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setInput(value);\r\n    if (value.trim()) {\r\n      const newSuggestions = getCommandSuggestions(value).map(s => s.command);\r\n      setSuggestions(newSuggestions);\r\n      setSelectedSuggestion(-1);\r\n    } else {\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const handleCommandClick = (command: string) => {\r\n    if (command.startsWith('cat ')) {\r\n      const projectName = command.split(' ')[1];\r\n      const project = projects.find(p => p.name.toLowerCase() === projectName);\r\n      if (project) {\r\n        setSelectedProject(project);\r\n        openDetailsPanel(project);\r\n      }\r\n    } else {\r\n      executeCommand(command);\r\n      setInput('');\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    switch (e.key) {\r\n      case 'Enter':\r\n        if (selectedSuggestion >= 0 && selectedSuggestion < suggestions.length) {\r\n          const selectedCommand = suggestions[selectedSuggestion];\r\n          handleCommandClick(selectedCommand);\r\n        } else {\r\n          handleCommandClick(input);\r\n        }\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        if (suggestions.length > 0) {\r\n          setSelectedSuggestion(prev =>\r\n            prev <= 0 ? suggestions.length - 1 : prev - 1\r\n          );\r\n        } else {\r\n          setInput(navigateHistory('up'));\r\n        }\r\n        break;\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        if (suggestions.length > 0) {\r\n          setSelectedSuggestion(prev =>\r\n            prev >= suggestions.length - 1 ? 0 : prev + 1\r\n          );\r\n        } else {\r\n          setInput(navigateHistory('down'));\r\n        }\r\n        break;\r\n      case 'Tab':\r\n        e.preventDefault();\r\n        if (suggestions.length > 0) {\r\n          setInput(suggestions[0]);\r\n          setSuggestions([]);\r\n          setSelectedSuggestion(-1);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        setSuggestions([]);\r\n        setSelectedSuggestion(-1);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleCloseProject = () => {\r\n    setSelectedProject(null);\r\n    closeDetailsPanel();\r\n  };\r\n\r\n  // Only show history after the last clear marker\r\n  const getVisibleHistory = () => {\r\n    const lastClearIndex = state.history.map(h => h.type).lastIndexOf('clear');\r\n    return lastClearIndex >= 0 ? state.history.slice(lastClearIndex + 1) : state.history;\r\n  };\r\n\r\n  return (\r\n    <TerminalWrapper>\r\n      <Sidebar>\r\n        <DirectoryTree>\r\n          <DirectoryItem $isActive={state.currentDirectory === '~'}>\r\n            <DirectoryIcon>📁</DirectoryIcon>\r\n            <DirectoryName>projects</DirectoryName>\r\n          </DirectoryItem>\r\n          <DirectoryItem $isActive={false}>\r\n            <DirectoryIcon>📁</DirectoryIcon>\r\n            <DirectoryName>about.txt</DirectoryName>\r\n          </DirectoryItem>\r\n        </DirectoryTree>\r\n      </Sidebar>\r\n      <TerminalContent>\r\n        <WelcomeMessage\r\n          onCommandClick={handleCommandClick}\r\n          isFirstTime={isFirstTime}\r\n          projects={projects}\r\n        />\r\n        {getVisibleHistory().map((item, index) => (\r\n          <React.Fragment key={index}>\r\n            <CommandLine>\r\n              <Prompt>user@aznet:~$</Prompt>\r\n              {item.command}\r\n            </CommandLine>\r\n            {typeof item.output === 'object' && item.output !== null && 'projects' in item.output ? (\r\n              <Output type=\"info\">\r\n                {(item.output as { projects: Project[] }).projects.map((project: Project) => (\r\n                  <div key={project.name}>\r\n                    <ClickableText\r\n                      onClick={() => handleCommandClick(`cat ${project.name.toLowerCase()}`)}\r\n                      style={{ cursor: 'pointer', color: '#a78bfa', fontWeight: 600 }}\r\n                    >\r\n                      {project.name}\r\n                    </ClickableText>\r\n                    {': '}{project.description}\r\n                  </div>\r\n                ))}\r\n              </Output>\r\n            ) : typeof item.output === 'string' ? (\r\n              <Output type={item.type === 'project-list' || item.type === 'welcome' || item.type === 'clear' ? 'info' : item.type as 'success' | 'error' | 'info'}>\r\n                {item.output}\r\n              </Output>\r\n            ) : null}\r\n          </React.Fragment>\r\n        ))}\r\n        <CommandInput>\r\n          <Prompt>user@aznet:~$</Prompt>\r\n          <Input\r\n            ref={inputRef}\r\n            value={input}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleKeyDown}\r\n            placeholder=\"Type a command...\"\r\n          />\r\n          {suggestions.length > 0 && (\r\n            <SuggestionBox>\r\n              {suggestions.map((suggestion, index) => (\r\n                <SuggestionItem\r\n                  key={suggestion}\r\n                  $isSelected={index === selectedSuggestion}\r\n                  onClick={() => {\r\n                    setInput(suggestion);\r\n                    setSuggestions([]);\r\n                    setSelectedSuggestion(-1);\r\n                    inputRef.current?.focus();\r\n                  }}\r\n                >\r\n                  {suggestion}\r\n                </SuggestionItem>\r\n              ))}\r\n            </SuggestionBox>\r\n          )}\r\n        </CommandInput>\r\n      </TerminalContent>\r\n      <DetailsPanel $isOpen={state.isDetailsPanelOpen}>\r\n        {selectedProject && (\r\n          <ProjectDetails\r\n            project={selectedProject}\r\n            onClose={handleCloseProject}\r\n          />\r\n        )}\r\n      </DetailsPanel>\r\n    </TerminalWrapper>\r\n  );\r\n}; "
              },
              "WelcomeMessage.tsx": {
                "name": "WelcomeMessage.tsx",
                "type": "file",
                "content": "import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst WelcomeContainer = styled.div`\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst AsciiArt = styled.pre`\r\n  color: ${({ theme }) => theme.colors.prompt};\r\n  font-family: 'Fira Code', monospace;\r\n  white-space: pre;\r\n  margin: 1rem 0;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n  font-size: 1.5rem;\r\n  margin: 1rem 0;\r\n`;\r\n\r\nconst Subtitle = styled.div`\r\n  color: ${({ theme }) => theme.colors.text.secondary};\r\n  margin: 0.5rem 0;\r\n  \r\n  .heart {\r\n    color: ${({ theme }) => theme.colors.error};\r\n  }\r\n`;\r\n\r\nconst WelcomeText = styled.div`\r\n  color: ${({ theme }) => theme.colors.text.primary};\r\n  margin: 1rem 0;\r\n`;\r\n\r\nconst QuickMenu = styled.div`\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin: 1rem 0;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst ClickableItem = styled.span`\r\n  color: ${({ theme }) => theme.colors.link};\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: ${({ theme }) => theme.colors.linkHover};\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nconst FirstTimeHint = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.background.secondary};\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  margin: 1rem 0;\r\n  \r\n  ul {\r\n    margin: 0.5rem 0;\r\n    padding-left: 1.5rem;\r\n  }\r\n  \r\n  li {\r\n    margin: 0.5rem 0;\r\n  }\r\n  \r\n  .highlight {\r\n    color: ${({ theme }) => theme.colors.link};\r\n  }\r\n`;\r\n\r\ninterface WelcomeMessageProps {\r\n  onCommandClick: (command: string) => void;\r\n  isFirstTime: boolean;\r\n  projects: Array<{\r\n    name: string;\r\n    description: string;\r\n  }>;\r\n}\r\n\r\nexport const WelcomeMessage: React.FC<WelcomeMessageProps> = ({ \r\n  onCommandClick, \r\n  isFirstTime,\r\n  projects \r\n}) => {\r\n  const handleClick = (command: string) => (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    onCommandClick(command);\r\n  };\r\n\r\n  return (\r\n    <WelcomeContainer>\r\n      <AsciiArt>\r\n        {`\r\n    █████╗ ███████╗███╗   ██╗███████╗████████╗\r\n   ██╔══██╗╚══███╔╝████╗  ██║██╔════╝╚══██╔══╝\r\n   ███████║  ███╔╝ ██╔██╗ ██║█████╗     ██║   \r\n   ██╔══██║ ███╔╝  ██║╚██╗██║██╔══╝     ██║   \r\n   ██║  ██║███████╗██║ ╚████║███████╗   ██║   \r\n   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝╚══════╝   ╚═╝   \r\n`}\r\n      </AsciiArt>\r\n      \r\n      <Title>Welcome to AZNET Terminal Interface</Title>\r\n      <Subtitle>\r\n        Created with <span className=\"heart\">♥</span> by <b>Hugo Villeneuve</b>\r\n      </Subtitle>\r\n      \r\n      <WelcomeText>\r\n        Type <ClickableItem onClick={handleClick('help')}>help</ClickableItem> or click a command below to get started.\r\n      </WelcomeText>\r\n      \r\n      <WelcomeText>Quick Menu:</WelcomeText>\r\n      <QuickMenu>\r\n        <ClickableItem onClick={handleClick('about')}>about</ClickableItem>\r\n        <ClickableItem onClick={handleClick('projects')}>projects</ClickableItem>\r\n        <ClickableItem onClick={handleClick('contact')}>contact</ClickableItem>\r\n        <ClickableItem onClick={handleClick('ls')}>ls</ClickableItem>\r\n        <ClickableItem onClick={handleClick('neofetch')}>neofetch</ClickableItem>\r\n      </QuickMenu>\r\n      \r\n      {projects.length > 0 && (\r\n        <>\r\n          <WelcomeText>Projects:</WelcomeText>\r\n          {projects.map((project) => (\r\n            <div key={project.name}>\r\n              <ClickableItem onClick={handleClick(`cat ${project.name.toLowerCase()}`)}>\r\n                {project.name}\r\n              </ClickableItem>\r\n              {' '}– {project.description}\r\n            </div>\r\n          ))}\r\n        </>\r\n      )}\r\n      \r\n      <WelcomeText>\r\n        You can also type commands directly, just like a real terminal.\r\n      </WelcomeText>\r\n      \r\n      {isFirstTime && (\r\n        <FirstTimeHint>\r\n          <b>First time here?</b>\r\n          <ul>\r\n            <li>Try typing <ClickableItem onClick={handleClick('help')}>help</ClickableItem> to see all available commands.</li>\r\n            <li>Click any <span className=\"highlight\">purple</span> command or project name to run it instantly.</li>\r\n            <li>Use <b>Tab</b> for autocomplete and <b>Arrow keys</b> for command history.</li>\r\n            <li>Type <ClickableItem onClick={handleClick('about')}>about</ClickableItem> to learn more about this project.</li>\r\n          </ul>\r\n        </FirstTimeHint>\r\n      )}\r\n    </WelcomeContainer>\r\n  );\r\n}; "
              }
            }
          }
        }
      },
      "data": {
        "name": "data",
        "type": "directory",
        "children": {
          "projects.ts": {
            "name": "projects.ts",
            "type": "file",
            "content": "import { Project } from '../types';\r\n\r\nexport const projects: Project[] = [\r\n  {\r\n    name: 'Terminal Interface',\r\n    description: 'A modern terminal interface built with React and TypeScript',\r\n    url: 'https://github.com/username/terminal-interface',\r\n    image: 'https://via.placeholder.com/400x300',\r\n    architectureImage: 'https://via.placeholder.com/800x600',\r\n    overview: 'A terminal interface that provides a modern and interactive way to browse and explore projects.',\r\n    keyFeatures: [\r\n      'Three-panel layout with directory tree, terminal, and details panel',\r\n      'Command history and auto-completion',\r\n      'Project details with architecture diagrams',\r\n      'Responsive design with dark theme'\r\n    ],\r\n    architecture: {\r\n      frontend: {\r\n        framework: 'React',\r\n        language: 'TypeScript',\r\n        styling: 'styled-components',\r\n        stateManagement: 'React Hooks'\r\n      },\r\n      backend: {\r\n        framework: 'Express',\r\n        language: 'TypeScript',\r\n        database: 'MongoDB'\r\n      }\r\n    },\r\n    techStack: [\r\n      { name: 'React', version: '18.2.0', description: 'Frontend framework' },\r\n      { name: 'TypeScript', version: '4.9.5', description: 'Programming language' },\r\n      { name: 'styled-components', version: '6.0.7', description: 'CSS-in-JS styling' },\r\n      { name: 'Express', version: '4.18.2', description: 'Backend framework' },\r\n      { name: 'MongoDB', version: '6.0.5', description: 'Database' }\r\n    ],\r\n    directoryStructure: {\r\n      src: {\r\n        components: ['Terminal', 'Sidebar', 'DetailsPanel'],\r\n        hooks: ['useTerminal', 'useFileSystem'],\r\n        services: ['commands', 'fileSystem'],\r\n        styles: ['theme', 'globalStyles'],\r\n        types: ['index']\r\n      }\r\n    },\r\n    apiEndpoints: [\r\n      {\r\n        path: '/api/projects',\r\n        method: 'GET',\r\n        description: 'Get all projects',\r\n        response: 'Array of Project objects'\r\n      },\r\n      {\r\n        path: '/api/projects/:id',\r\n        method: 'GET',\r\n        description: 'Get project by ID',\r\n        response: 'Project object'\r\n      }\r\n    ],\r\n    workflow: [\r\n      'Clone repository',\r\n      'Install dependencies',\r\n      'Start development server',\r\n      'Build for production'\r\n    ],\r\n    summary: 'A modern terminal interface that provides an interactive way to explore projects and their details.'\r\n  },\r\n  {\r\n    name: 'D4UT',\r\n    description: 'A web-based utility tool for Diablo 4 players, offering build optimization and stat analysis.',\r\n    url: 'https://github.com/username/d4ut',\r\n    image: 'https://via.placeholder.com/400x300',\r\n    architectureImage: 'https://via.placeholder.com/800x600',\r\n    overview: 'Helps Diablo 4 players maximize their character builds with advanced calculations and item comparison.',\r\n    keyFeatures: [\r\n      'Build calculations and stat analysis',\r\n      'Gear optimization',\r\n      'Interactive maps and planners',\r\n      'Multi-language support'\r\n    ],\r\n    architecture: {\r\n      frontend: {\r\n        framework: 'React',\r\n        language: 'TypeScript',\r\n        styling: 'TailwindCSS',\r\n        stateManagement: 'Zustand'\r\n      },\r\n      backend: {\r\n        framework: 'None',\r\n        language: 'N/A',\r\n        database: 'N/A'\r\n      }\r\n    },\r\n    techStack: [\r\n      { name: 'React', version: '18.2.0', description: 'Frontend framework' },\r\n      { name: 'Zustand', version: '4.3.0', description: 'State management' },\r\n      { name: 'TailwindCSS', version: '3.2.7', description: 'Styling' }\r\n    ],\r\n    directoryStructure: {\r\n      src: {\r\n        components: ['App', 'Stats', 'Map'],\r\n        store: ['store'],\r\n        calculation: ['calculation'],\r\n        locales: ['locales']\r\n      }\r\n    },\r\n    apiEndpoints: [],\r\n    workflow: [\r\n      'Clone repository',\r\n      'Install dependencies',\r\n      'Start development server',\r\n      'Build for production'\r\n    ],\r\n    summary: 'D4UT helps Diablo 4 players optimize their builds and compare items.'\r\n  },\r\n  {\r\n    name: 'LootManager',\r\n    description: 'A comprehensive guild management system for Throne and Liberty, focusing on DKP tracking and raid scheduling.',\r\n    url: 'https://github.com/username/lootmanager',\r\n    image: 'https://via.placeholder.com/400x300',\r\n    architectureImage: 'https://via.placeholder.com/800x600',\r\n    overview: 'Tracks DKP, manages raids, and handles loot distribution for T&L guilds.',\r\n    keyFeatures: [\r\n      'User and guild management',\r\n      'DKP tracking and distribution',\r\n      'Event and raid scheduling',\r\n      'Admin logs and premium features'\r\n    ],\r\n    architecture: {\r\n      frontend: {\r\n        framework: 'React',\r\n        language: 'TypeScript',\r\n        styling: 'Material-UI',\r\n        stateManagement: 'Redux Toolkit'\r\n      },\r\n      backend: {\r\n        framework: 'Firebase Functions',\r\n        language: 'TypeScript',\r\n        database: 'Firestore'\r\n      }\r\n    },\r\n    techStack: [\r\n      { name: 'React', version: '18.2.0', description: 'Frontend framework' },\r\n      { name: 'Redux Toolkit', version: '1.9.1', description: 'State management' },\r\n      { name: 'Material-UI', version: '5.11.0', description: 'UI components' },\r\n      { name: 'Firebase', version: '9.17.1', description: 'Backend and database' }\r\n    ],\r\n    directoryStructure: {\r\n      src: {\r\n        api: ['api'],\r\n        components: ['Dashboard', 'RaidScheduler'],\r\n        features: ['DKP', 'Events'],\r\n        store: ['store'],\r\n        services: ['dkpService']\r\n      }\r\n    },\r\n    apiEndpoints: [\r\n      {\r\n        path: '/auth',\r\n        method: 'POST',\r\n        description: 'Authenticate user',\r\n        response: 'User object'\r\n      },\r\n      {\r\n        path: '/dkp-management',\r\n        method: 'GET',\r\n        description: 'Get DKP data',\r\n        response: 'DKP data'\r\n      }\r\n    ],\r\n    workflow: [\r\n      'Clone repository',\r\n      'Install dependencies',\r\n      'Start development server',\r\n      'Build for production'\r\n    ],\r\n    summary: 'LootManager helps T&L guilds manage DKP, raids, and loot.'\r\n  },\r\n  {\r\n    name: 'RaidAlert',\r\n    description: 'A Discord bot and web dashboard for ARK Survival Evolved, providing real-time raid notifications and tribe management.',\r\n    url: 'https://github.com/username/raidalert',\r\n    image: 'https://via.placeholder.com/400x300',\r\n    architectureImage: 'https://via.placeholder.com/800x600',\r\n    overview: 'Monitors Discord and ARK servers, alerts players of raids, and manages tribe resources.',\r\n    keyFeatures: [\r\n      'Discord bot for tribe activity',\r\n      'Web dashboard for analytics',\r\n      'RESTful API for tribe config',\r\n      'Tiered licensing system'\r\n    ],\r\n    architecture: {\r\n      frontend: {\r\n        framework: 'Static HTML/JS',\r\n        language: 'JavaScript',\r\n        styling: 'Custom CSS',\r\n        stateManagement: 'None'\r\n      },\r\n      backend: {\r\n        framework: 'Express.js',\r\n        language: 'JavaScript',\r\n        database: 'Firestore'\r\n      }\r\n    },\r\n    techStack: [\r\n      { name: 'Node.js', version: '18.x', description: 'Backend runtime' },\r\n      { name: 'Express.js', version: '4.18.2', description: 'Backend framework' },\r\n      { name: 'discord.js', version: '14.7.1', description: 'Discord bot' },\r\n      { name: 'Firestore', version: '9.17.1', description: 'Database' }\r\n    ],\r\n    directoryStructure: {\r\n      backend: {\r\n        routes: ['tribes', 'licenses'],\r\n        utils: ['firestore', 'analytics'],\r\n        logs: ['bot.log', 'server.log']\r\n      },\r\n      dashboard: {\r\n        static: ['index.html', 'dashboard.js']\r\n      }\r\n    },\r\n    apiEndpoints: [\r\n      {\r\n        path: '/create-tribe-config',\r\n        method: 'POST',\r\n        description: 'Create or update a tribe configuration',\r\n        response: 'Tribe config object'\r\n      },\r\n      {\r\n        path: '/get-tribe-config/:guildId',\r\n        method: 'GET',\r\n        description: 'Fetch a tribe config for a guild',\r\n        response: 'Tribe config object'\r\n      }\r\n    ],\r\n    workflow: [\r\n      'Clone repository',\r\n      'Install dependencies',\r\n      'Start Discord bot and web server',\r\n      'Monitor tribe activity'\r\n    ],\r\n    summary: 'RaidAlert helps ARK tribes stay safe and manage resources.'\r\n  }\r\n]; "
          }
        }
      },
      "hooks": {
        "name": "hooks",
        "type": "directory",
        "children": {
          "useTerminal.ts": {
            "name": "useTerminal.ts",
            "type": "file",
            "content": "import { useState, useCallback } from 'react';\r\nimport { TerminalState, Project, CommandSuggestion } from '../types';\r\nimport { TerminalCommands } from '../services/commands';\r\nimport { projects } from '../data/projects';\r\n\r\nexport const useTerminal = (projects: Project[]) => {\r\n  const [state, setState] = useState<TerminalState>({\r\n    history: [],\r\n    currentDirectory: '~',\r\n    isDetailsPanelOpen: false,\r\n    selectedProject: null\r\n  });\r\n\r\n  const [historyIndex, setHistoryIndex] = useState(-1);\r\n  const commands = new TerminalCommands(projects);\r\n\r\n  const executeCommand = useCallback((input: string) => {\r\n    const [command, ...args] = input.trim().split(' ');\r\n    const result = commands.execute(command, args);\r\n\r\n    setState(prev => ({\r\n      ...prev,\r\n      history: [\r\n        ...prev.history,\r\n        { command: input, output: result.output, type: result.type }\r\n      ],\r\n      currentDirectory: commands.getCurrentDirectory()\r\n    }));\r\n\r\n    setHistoryIndex(-1);\r\n  }, [commands]);\r\n\r\n  const navigateHistory = useCallback((direction: 'up' | 'down'): string => {\r\n    if (state.history.length === 0) return '';\r\n\r\n    let newIndex = historyIndex;\r\n    if (direction === 'up') {\r\n      newIndex = historyIndex === -1 ? state.history.length - 1 : Math.max(0, historyIndex - 1);\r\n    } else {\r\n      newIndex = Math.min(state.history.length - 1, historyIndex + 1);\r\n    }\r\n    setHistoryIndex(newIndex);\r\n    return state.history[newIndex].command;\r\n  }, [state.history, historyIndex]);\r\n\r\n  const getCommandSuggestions = useCallback((input: string): CommandSuggestion[] => {\r\n    if (!input.trim()) return [];\r\n\r\n    const availableCommands = [\r\n      'help',\r\n      'clear',\r\n      'about',\r\n      'projects',\r\n      'contact',\r\n      'ls',\r\n      'cd',\r\n      'pwd',\r\n      'cat',\r\n      'echo',\r\n      'neofetch',\r\n      'exit'\r\n    ];\r\n\r\n    return availableCommands\r\n      .filter(cmd => cmd.startsWith(input.toLowerCase()))\r\n      .map(command => ({ command, score: 1 }));\r\n  }, []);\r\n\r\n  const openDetailsPanel = useCallback((project: Project) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      isDetailsPanelOpen: true,\r\n      selectedProject: project\r\n    }));\r\n  }, []);\r\n\r\n  const closeDetailsPanel = useCallback(() => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      isDetailsPanelOpen: false,\r\n      selectedProject: null\r\n    }));\r\n  }, []);\r\n\r\n  return {\r\n    state,\r\n    executeCommand,\r\n    navigateHistory,\r\n    getCommandSuggestions,\r\n    openDetailsPanel,\r\n    closeDetailsPanel\r\n  };\r\n}; "
          }
        }
      },
      "index.tsx": {
        "name": "index.tsx",
        "type": "file",
        "content": "import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport { App } from './App';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\n\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n); "
      },
      "services": {
        "name": "services",
        "type": "directory",
        "children": {
          "commands.ts": {
            "name": "commands.ts",
            "type": "file",
            "content": "import { Project } from '../types';\r\n\r\nfunction getCommandSuggestions(input: string, commands: string[]): string[] {\r\n  // Simple fuzzy match: startsWith, includes, Levenshtein (optional)\r\n  const inputLower = input.toLowerCase();\r\n  const scored = commands.map(cmd => {\r\n    if (cmd === inputLower) return { cmd, score: 1 };\r\n    if (cmd.startsWith(inputLower)) return { cmd, score: 0.9 };\r\n    if (cmd.includes(inputLower)) return { cmd, score: 0.7 };\r\n    // Levenshtein distance (optional, for now skip)\r\n    return { cmd, score: 0 };\r\n  });\r\n  return scored.filter(s => s.score > 0.5).sort((a, b) => b.score - a.score).map(s => s.cmd);\r\n}\r\n\r\nexport class TerminalCommands {\r\n  private projects: Project[];\r\n  private currentDirectory: string = '~';\r\n\r\n  constructor(projects: Project[]) {\r\n    this.projects = projects;\r\n  }\r\n\r\n  execute(command: string, args: string[]): { output: any; type: 'success' | 'error' | 'info' | 'project-list' | 'welcome' | 'clear' } {\r\n    const commandMap: { [key: string]: (args: string[]) => any } = {\r\n      help: this.help,\r\n      clear: this.clear,\r\n      about: this.about,\r\n      projects: this.projectsList,\r\n      contact: this.contact,\r\n      ls: this.ls,\r\n      cd: this.cd,\r\n      pwd: this.pwd,\r\n      cat: this.cat,\r\n      echo: this.echo,\r\n      neofetch: this.neofetch,\r\n      exit: this.exit\r\n    };\r\n\r\n    if (!command) {\r\n      return {\r\n        output: 'Command not found: Empty command',\r\n        type: 'error'\r\n      };\r\n    }\r\n\r\n    if (command in commandMap) {\r\n      try {\r\n        const output = commandMap[command].call(this, args);\r\n        if (command === 'projects' && typeof output === 'object' && output.type === 'project-list') {\r\n          return {\r\n            output: output,\r\n            type: 'project-list'\r\n          };\r\n        }\r\n        if (command === 'clear') {\r\n          return { output: { type: 'clear' }, type: 'clear' };\r\n        }\r\n        return {\r\n          output,\r\n          type: command === 'exit' ? 'info' : 'success'\r\n        };\r\n      } catch (error) {\r\n        return {\r\n          output: error instanceof Error ? error.message : 'An error occurred',\r\n          type: 'error'\r\n        };\r\n      }\r\n    }\r\n\r\n    // Fuzzy match for unknown commands\r\n    const suggestions = getCommandSuggestions(command, Object.keys(commandMap));\r\n    let message = `Command not found: ${command}`;\r\n    if (suggestions.length > 0) {\r\n      message += `\\nDid you mean: ${suggestions[0]}?`;\r\n      if (suggestions.length > 1) {\r\n        message += `\\nOther possibilities: ${suggestions.slice(1).join(', ')}`;\r\n      }\r\n    }\r\n    message += `\\nType 'help' for a list of available commands.`;\r\n    return {\r\n      output: message,\r\n      type: 'error'\r\n    };\r\n  }\r\n\r\n  getCurrentDirectory(): string {\r\n    return this.currentDirectory;\r\n  }\r\n\r\n  private help = (): string => {\r\n    return `Available commands:\r\n  help        - Show this help message\r\n  clear       - Clear the terminal\r\n  about       - Show information about the terminal\r\n  projects    - List available projects\r\n  contact     - Show contact information\r\n  ls          - List directory contents\r\n  cd          - Change directory\r\n  pwd         - Print working directory\r\n  cat         - Read file contents\r\n  echo        - Print text\r\n  neofetch    - Display system information\r\n  exit        - Close the terminal`;\r\n  };\r\n\r\n  private clear = (): { type: 'clear' } => {\r\n    return { type: 'clear' };\r\n  };\r\n\r\n  private about = (): string => {\r\n    return 'Welcome to my terminal interface\\nA modern terminal interface built with React and TypeScript.';\r\n  };\r\n\r\n  private projectsList = (): { type: 'project-list'; projects: Project[] } => {\r\n    return { type: 'project-list', projects: this.projects };\r\n  };\r\n\r\n  private contact = (): string => {\r\n    return `GitHub: https://github.com/username\r\nEmail: user@example.com\r\nLinkedIn: https://linkedin.com/in/username`;\r\n  };\r\n\r\n  private ls = (): string => {\r\n    if (this.currentDirectory === '~') {\r\n      return 'projects\\nabout.txt';\r\n    }\r\n    if (this.currentDirectory === '~/projects') {\r\n      return this.projects.map(project => project.name).join('\\n');\r\n    }\r\n    throw new Error('Directory not found');\r\n  };\r\n\r\n  private cd = (args: string[]): string => {\r\n    const dir = args[0];\r\n    if (!dir) {\r\n      this.currentDirectory = '~';\r\n      return '';\r\n    }\r\n    if (dir === '~' || dir === '/') {\r\n      this.currentDirectory = '~';\r\n      return '';\r\n    }\r\n    if (dir === 'projects' && this.currentDirectory === '~') {\r\n      this.currentDirectory = '~/projects';\r\n      return '';\r\n    }\r\n    if (dir === '..' && this.currentDirectory === '~/projects') {\r\n      this.currentDirectory = '~';\r\n      return '';\r\n    }\r\n    throw new Error('Directory not found');\r\n  };\r\n\r\n  private pwd = (): string => {\r\n    return this.currentDirectory;\r\n  };\r\n\r\n  private cat = (args: string[]): string => {\r\n    const file = args[0];\r\n    if (!file) {\r\n      throw new Error('Please specify a file');\r\n    }\r\n    if (file === 'about.txt' && this.currentDirectory === '~') {\r\n      return 'Welcome to my terminal interface\\nA modern terminal interface built with React and TypeScript.';\r\n    }\r\n    if (this.currentDirectory === '~/projects') {\r\n      const project = this.projects.find(p => p.name === file);\r\n      if (project) {\r\n        return `${project.name}\\n${project.description}\\n\\n${project.overview}`;\r\n      }\r\n    }\r\n    throw new Error('File not found');\r\n  };\r\n\r\n  private echo = (args: string[]): string => {\r\n    return args.join(' ');\r\n  };\r\n\r\n  private neofetch = (): string => {\r\n    return `OS: ${window.navigator.platform}\r\nBrowser: ${window.navigator.userAgent}\r\nTerminal: v1.0.0\r\nTheme: Dark\r\nShell: React Terminal\r\nResolution: ${window.innerWidth}x${window.innerHeight}`;\r\n  };\r\n\r\n  private exit = (): string => {\r\n    return 'Goodbye! Thanks for visiting.';\r\n  };\r\n} "
          },
          "fileSystem.ts": {
            "name": "fileSystem.ts",
            "type": "file",
            "content": "import { FileSystemNode, Project } from '../types';\r\n\r\nexport class VirtualFileSystem {\r\n  private root: FileSystemNode;\r\n  private currentPath: string[];\r\n\r\n  constructor() {\r\n    this.root = this.initializeFileSystem();\r\n    this.currentPath = ['/'];\r\n  }\r\n\r\n  private initializeFileSystem(): FileSystemNode {\r\n    return {\r\n      name: '/',\r\n      type: 'directory',\r\n      children: {\r\n        'projects': {\r\n          name: 'projects',\r\n          type: 'directory',\r\n          children: {\r\n            'web': {\r\n              name: 'web',\r\n              type: 'directory',\r\n              children: {}\r\n            },\r\n            'ai': {\r\n              name: 'ai',\r\n              type: 'directory',\r\n              children: {}\r\n            },\r\n            'data': {\r\n              name: 'data',\r\n              type: 'directory',\r\n              children: {}\r\n            }\r\n          }\r\n        },\r\n        'about': {\r\n          name: 'about.txt',\r\n          type: 'file',\r\n          content: 'Hugo Villeneuve - Full Stack Developer\\nAzNet Projects Terminal Interface'\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  public addProjectFiles(projects: Project[]): void {\r\n    const projectsDir = this.root.children?.['projects']?.children;\r\n    if (!projectsDir) return;\r\n\r\n    projects.forEach(project => {\r\n      projectsDir[project.name.toLowerCase()] = {\r\n        name: project.name.toLowerCase(),\r\n        type: 'file',\r\n        content: `${project.name}\\n${project.description}\\n${project.overview || ''}`\r\n      };\r\n    });\r\n  }\r\n\r\n  public getCurrentDirectory(): FileSystemNode {\r\n    let current = this.root;\r\n    for (const dir of this.currentPath.slice(1)) {\r\n      if (current.children && current.children[dir]) {\r\n        current = current.children[dir];\r\n      }\r\n    }\r\n    return current;\r\n  }\r\n\r\n  public getPathString(): string {\r\n    return this.currentPath.join('/');\r\n  }\r\n\r\n  public listDirectory(): { name: string; type: 'file' | 'directory'; size: number }[] {\r\n    const current = this.getCurrentDirectory();\r\n    if (!current.children) return [];\r\n    \r\n    return Object.entries(current.children).map(([name, item]) => ({\r\n      name,\r\n      type: item.type,\r\n      size: item.type === 'file' ? (item.content?.length || 0) : 0\r\n    }));\r\n  }\r\n\r\n  public changeDirectory(path: string): boolean {\r\n    if (path === '..') {\r\n      if (this.currentPath.length > 1) {\r\n        this.currentPath.pop();\r\n      }\r\n      return true;\r\n    }\r\n\r\n    if (path === '/') {\r\n      this.currentPath = ['/'];\r\n      return true;\r\n    }\r\n\r\n    const current = this.getCurrentDirectory();\r\n    if (current.children && current.children[path] && current.children[path].type === 'directory') {\r\n      this.currentPath.push(path);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getFileContent(path: string): string | null {\r\n    const current = this.getCurrentDirectory();\r\n    // Try current directory first\r\n    if (current.children && current.children[path] && current.children[path].type === 'file') {\r\n      return current.children[path].content || null;\r\n    }\r\n    // If not found, try /projects for project files\r\n    const projectsDir = this.root.children?.['projects']?.children;\r\n    if (projectsDir && projectsDir[path] && projectsDir[path].type === 'file') {\r\n      return projectsDir[path].content || null;\r\n    }\r\n    return null;\r\n  }\r\n} "
          }
        }
      },
      "setupTests.ts": {
        "name": "setupTests.ts",
        "type": "file",
        "content": "import '@testing-library/jest-dom'; "
      },
      "styles": {
        "name": "styles",
        "type": "directory",
        "children": {
          "globalStyles.ts": {
            "name": "globalStyles.ts",
            "type": "file",
            "content": "import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  html, body {\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow: hidden;\r\n  }\r\n\r\n  body {\r\n    font-family: ${({ theme }) => theme.typography.fontFamily.monospace};\r\n    font-size: ${({ theme }) => theme.typography.fontSize.md};\r\n    line-height: 1.5;\r\n    color: ${({ theme }) => theme.colors.text.primary};\r\n    background-color: ${({ theme }) => theme.colors.background.primary};\r\n  }\r\n\r\n  #root {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: ${({ theme }) => theme.colors.background.primary};\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: ${({ theme }) => theme.colors.background.secondary};\r\n    border-radius: 4px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb:hover {\r\n    background: ${({ theme }) => theme.colors.background.hover};\r\n  }\r\n`; "
          },
          "styled.d.ts": {
            "name": "styled.d.ts",
            "type": "file",
            "content": "import 'styled-components';\r\nimport { Theme } from './theme';\r\n\r\ndeclare module 'styled-components' {\r\n  export interface DefaultTheme extends Theme {}\r\n} "
          },
          "theme.ts": {
            "name": "theme.ts",
            "type": "file",
            "content": "export const theme = {\r\n  colors: {\r\n    background: {\r\n      primary: '#1e1e1e',\r\n      secondary: '#2d2d2d',\r\n      hover: '#3d3d3d'\r\n    },\r\n    text: {\r\n      primary: '#ffffff',\r\n      secondary: '#cccccc'\r\n    },\r\n    prompt: '#4CAF50',\r\n    success: '#4CAF50',\r\n    error: '#f44336',\r\n    info: '#2196F3',\r\n    link: '#64B5F6',\r\n    linkHover: '#90CAF9',\r\n    border: '#3d3d3d'\r\n  },\r\n  spacing: {\r\n    xs: '0.25rem',\r\n    sm: '0.5rem',\r\n    md: '1rem',\r\n    lg: '1.5rem',\r\n    xl: '2rem'\r\n  },\r\n  typography: {\r\n    fontFamily: {\r\n      monospace: \"'Fira Code', monospace\",\r\n      sans: \"'Inter', sans-serif\"\r\n    },\r\n    fontSize: {\r\n      xs: '0.75rem',\r\n      sm: '0.875rem',\r\n      md: '1rem',\r\n      lg: '1.125rem',\r\n      xl: '1.25rem'\r\n    }\r\n  }\r\n};\r\n\r\nexport type Theme = typeof theme; "
          },
          "ThemeProvider.tsx": {
            "name": "ThemeProvider.tsx",
            "type": "file",
            "content": "import React from 'react';\r\nimport { ThemeProvider as StyledThemeProvider } from 'styled-components';\r\nimport { theme } from './theme';\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  return (\r\n    <StyledThemeProvider theme={theme}>\r\n      {children}\r\n    </StyledThemeProvider>\r\n  );\r\n}; "
          }
        }
      },
      "types": {
        "name": "types",
        "type": "directory",
        "children": {
          "index.ts": {
            "name": "index.ts",
            "type": "file",
            "content": "export interface Project {\r\n  name: string;\r\n  description: string;\r\n  url: string;\r\n  image: string;\r\n  architectureImage: string;\r\n  overview: string;\r\n  keyFeatures: string[];\r\n  architecture: Architecture;\r\n  techStack: TechStackItem[];\r\n  directoryStructure: DirectoryStructure;\r\n  apiEndpoints: ApiEndpoint[];\r\n  workflow: string[];\r\n  summary: string;\r\n}\r\n\r\nexport interface TechStackItem {\r\n  name: string;\r\n  version: string;\r\n  description: string;\r\n}\r\n\r\nexport interface ApiEndpoint {\r\n  path: string;\r\n  method: string;\r\n  description: string;\r\n  response: string;\r\n}\r\n\r\nexport interface Architecture {\r\n  frontend: {\r\n    framework: string;\r\n    language: string;\r\n    styling: string;\r\n    stateManagement: string;\r\n  };\r\n  backend: {\r\n    framework: string;\r\n    language: string;\r\n    database: string;\r\n  };\r\n}\r\n\r\nexport interface DirectoryStructure {\r\n  [key: string]: {\r\n    [key: string]: string[];\r\n  };\r\n}\r\n\r\nexport interface FileSystemNode {\r\n  name: string;\r\n  type: 'file' | 'directory';\r\n  content?: string;\r\n  children?: { [key: string]: FileSystemNode };\r\n}\r\n\r\nexport type TerminalCommandType = 'success' | 'error' | 'info' | 'project-list' | 'welcome' | 'clear';\r\n\r\nexport interface TerminalCommand {\r\n  command: string;\r\n  output: string | { type: 'project-list'; projects: Project[] } | { type: 'welcome' } | { type: 'clear' };\r\n  type: TerminalCommandType;\r\n}\r\n\r\nexport interface TerminalState {\r\n  history: TerminalCommand[];\r\n  currentDirectory: string;\r\n  isDetailsPanelOpen: boolean;\r\n  selectedProject: Project | null;\r\n}\r\n\r\nexport interface CommandSuggestion {\r\n  command: string;\r\n  score: number;\r\n} "
          }
        }
      },
      "__tests__": {
        "name": "__tests__",
        "type": "directory",
        "children": {
          "commands.test.ts": {
            "name": "commands.test.ts",
            "type": "file",
            "content": "import { TerminalCommands } from '../services/commands';\r\nimport { projects } from '../data/projects';\r\n\r\ndescribe('TerminalCommands', () => {\r\n  let commands: TerminalCommands;\r\n\r\n  beforeEach(() => {\r\n    commands = new TerminalCommands(projects);\r\n  });\r\n\r\n  it('executes help command', () => {\r\n    const result = commands.execute('help', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toContain('help        - Show this help message');\r\n  });\r\n\r\n  it('executes clear command', () => {\r\n    const result = commands.execute('clear', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toBe('');\r\n  });\r\n\r\n  it('executes about command', () => {\r\n    const result = commands.execute('about', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toContain('Welcome to my terminal interface');\r\n  });\r\n\r\n  it('executes projects command', () => {\r\n    const result = commands.execute('projects', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toContain('Terminal Interface');\r\n  });\r\n\r\n  it('executes contact command', () => {\r\n    const result = commands.execute('contact', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toContain('GitHub:');\r\n  });\r\n\r\n  it('executes ls command', () => {\r\n    const result = commands.execute('ls', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toContain('projects');\r\n    expect(result.output).toContain('about.txt');\r\n  });\r\n\r\n  it('executes cd command with valid directory', () => {\r\n    const result = commands.execute('cd', ['projects']);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toBe('');\r\n  });\r\n\r\n  it('executes cd command with invalid directory', () => {\r\n    const result = commands.execute('cd', ['invalid']);\r\n    expect(result.type).toBe('error');\r\n    expect(result.output).toContain('Directory not found');\r\n  });\r\n\r\n  it('executes pwd command', () => {\r\n    const result = commands.execute('pwd', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toBe('~');\r\n  });\r\n\r\n  it('executes cat command with valid file', () => {\r\n    const result = commands.execute('cat', ['about.txt']);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toContain('Welcome to my terminal interface');\r\n  });\r\n\r\n  it('executes cat command with invalid file', () => {\r\n    const result = commands.execute('cat', ['invalid.txt']);\r\n    expect(result.type).toBe('error');\r\n    expect(result.output).toContain('File not found');\r\n  });\r\n\r\n  it('executes echo command', () => {\r\n    const result = commands.execute('echo', ['Hello', 'World']);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toBe('Hello World');\r\n  });\r\n\r\n  it('executes neofetch command', () => {\r\n    const result = commands.execute('neofetch', []);\r\n    expect(result.type).toBe('success');\r\n    expect(result.output).toContain('OS:');\r\n  });\r\n\r\n  it('executes exit command', () => {\r\n    const result = commands.execute('exit', []);\r\n    expect(result.type).toBe('info');\r\n    expect(result.output).toContain('Goodbye');\r\n  });\r\n\r\n  it('handles unknown command', () => {\r\n    const result = commands.execute('unknown', []);\r\n    expect(result.type).toBe('error');\r\n    expect(result.output).toContain('Command not found');\r\n  });\r\n\r\n  it('handles empty command', () => {\r\n    const result = commands.execute('', []);\r\n    expect(result.type).toBe('error');\r\n    expect(result.output).toContain('Command not found');\r\n  });\r\n}); "
          },
          "Terminal.test.tsx": {
            "name": "Terminal.test.tsx",
            "type": "file",
            "content": "import React from 'react';\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\nimport { Terminal } from '../components/Terminal/Terminal';\r\nimport { projects } from '../data/projects';\r\nimport { ThemeProvider } from '../styles/ThemeProvider';\r\n\r\nconst renderWithTheme = (component: React.ReactElement) => {\r\n  return render(\r\n    <ThemeProvider>\r\n      {component}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\ndescribe('Terminal', () => {\r\n  it('renders the terminal interface', () => {\r\n    renderWithTheme(<Terminal />);\r\n    expect(screen.getByText('user@aznet:~$')).toBeInTheDocument();\r\n  });\r\n\r\n  it('executes commands and displays output', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'help' } });\r\n    fireEvent.keyDown(input, { key: 'Enter' });\r\n    \r\n    expect(screen.getByText(/help\\s+-\\sShow this help message/)).toBeInTheDocument();\r\n  });\r\n\r\n  it('navigates command history with arrow keys', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'help' } });\r\n    fireEvent.keyDown(input, { key: 'Enter' });\r\n    \r\n    fireEvent.keyDown(input, { key: 'ArrowUp' });\r\n    expect(input).toHaveValue('help');\r\n    \r\n    fireEvent.keyDown(input, { key: 'ArrowDown' });\r\n    expect(input).toHaveValue('help');\r\n  });\r\n\r\n  it('shows command suggestions', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'h' } });\r\n    expect(screen.getByText('help')).toBeInTheDocument();\r\n  });\r\n\r\n  it('opens and closes the details panel', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'projects' } });\r\n    fireEvent.keyDown(input, { key: 'Enter' });\r\n    \r\n    expect(screen.getByText(/Terminal Interface: A modern terminal interface/)).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles Tab key for command completion', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'h' } });\r\n    fireEvent.keyDown(input, { key: 'Tab' });\r\n    \r\n    expect(input).toHaveValue('help');\r\n  });\r\n\r\n  it('handles Escape key to clear suggestions', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'h' } });\r\n    expect(screen.getByText('help')).toBeInTheDocument();\r\n    \r\n    fireEvent.keyDown(input, { key: 'Escape' });\r\n    expect(screen.queryByText('help')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('navigates suggestions with arrow keys', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'h' } });\r\n    fireEvent.keyDown(input, { key: 'ArrowDown' });\r\n    fireEvent.keyDown(input, { key: 'Enter' });\r\n    \r\n    expect(screen.getByText(/help\\s+-\\sShow this help message/)).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles clicking on suggestions', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: 'h' } });\r\n    fireEvent.click(screen.getByText('help'));\r\n    \r\n    expect(input).toHaveValue('help');\r\n  });\r\n\r\n  it('handles empty input', () => {\r\n    renderWithTheme(<Terminal />);\r\n    const input = screen.getByPlaceholderText('Type a command...');\r\n    \r\n    fireEvent.change(input, { target: { value: '' } });\r\n    fireEvent.keyDown(input, { key: 'Enter' });\r\n    \r\n    expect(input).toHaveValue('');\r\n  });\r\n}); "
          },
          "useTerminal.test.ts": {
            "name": "useTerminal.test.ts",
            "type": "file",
            "content": "import { renderHook, act } from '@testing-library/react';\r\nimport { useTerminal } from '../hooks/useTerminal';\r\nimport { projects } from '../data/projects';\r\n\r\ndescribe('useTerminal', () => {\r\n  it('initializes with default state', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    expect(result.current.state).toEqual({\r\n      history: [],\r\n      currentDirectory: '~',\r\n      isDetailsPanelOpen: false,\r\n      selectedProject: null\r\n    });\r\n  });\r\n\r\n  it('executes command and updates history', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    act(() => {\r\n      result.current.executeCommand('help');\r\n    });\r\n    expect(result.current.state.history).toHaveLength(1);\r\n    expect(result.current.state.history[0].command).toBe('help');\r\n    expect(result.current.state.history[0].type).toBe('success');\r\n  });\r\n\r\n  it('navigates command history', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    act(() => {\r\n      result.current.executeCommand('help');\r\n      result.current.executeCommand('about');\r\n    });\r\n\r\n    let command;\r\n    act(() => {\r\n      command = result.current.navigateHistory('up');\r\n    });\r\n    expect(command).toBe('about');\r\n\r\n    act(() => {\r\n      command = result.current.navigateHistory('up');\r\n    });\r\n    expect(command).toBe('help');\r\n\r\n    act(() => {\r\n      command = result.current.navigateHistory('down');\r\n    });\r\n    expect(command).toBe('about');\r\n  });\r\n\r\n  it('gets command suggestions', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    const suggestions = result.current.getCommandSuggestions('h');\r\n    expect(suggestions).toContainEqual(expect.objectContaining({ command: 'help' }));\r\n  });\r\n\r\n  it('opens and closes details panel', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    act(() => {\r\n      result.current.openDetailsPanel(projects[0]);\r\n    });\r\n    expect(result.current.state.isDetailsPanelOpen).toBe(true);\r\n    expect(result.current.state.selectedProject).toBe(projects[0]);\r\n\r\n    act(() => {\r\n      result.current.closeDetailsPanel();\r\n    });\r\n    expect(result.current.state.isDetailsPanelOpen).toBe(false);\r\n    expect(result.current.state.selectedProject).toBe(null);\r\n  });\r\n\r\n  it('handles empty command history navigation', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    let command;\r\n    act(() => {\r\n      command = result.current.navigateHistory('up');\r\n    });\r\n    expect(command).toBe('');\r\n\r\n    act(() => {\r\n      command = result.current.navigateHistory('down');\r\n    });\r\n    expect(command).toBe('');\r\n  });\r\n\r\n  it('handles empty command suggestions', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    const suggestions = result.current.getCommandSuggestions('');\r\n    expect(suggestions).toHaveLength(0);\r\n  });\r\n\r\n  it('handles invalid command', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    act(() => {\r\n      result.current.executeCommand('invalid');\r\n    });\r\n    expect(result.current.state.history[0].type).toBe('error');\r\n    expect(result.current.state.history[0].output).toContain('Command not found');\r\n  });\r\n\r\n  it('handles directory navigation', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    act(() => {\r\n      result.current.executeCommand('cd projects');\r\n    });\r\n    expect(result.current.state.currentDirectory).toBe('~/projects');\r\n\r\n    act(() => {\r\n      result.current.executeCommand('cd ..');\r\n    });\r\n    expect(result.current.state.currentDirectory).toBe('~');\r\n  });\r\n\r\n  it('handles file reading', () => {\r\n    const { result } = renderHook(() => useTerminal(projects));\r\n    act(() => {\r\n      result.current.executeCommand('cat about.txt');\r\n    });\r\n    expect(result.current.state.history[0].type).toBe('success');\r\n    expect(result.current.state.history[0].output).toContain('Welcome to my terminal interface');\r\n  });\r\n}); "
          }
        }
      }
    }
  },
  "public": {
    "name": "public",
    "type": "directory",
    "children": {
      "index.html": {
        "name": "index.html",
        "type": "file",
        "content": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Terminal Interface</title>\r\n</head>\r\n<body>\r\n    <div id=\"root\"></div>\r\n</body>\r\n</html> "
      }
    }
  },
  "README.md": {
    "name": "README.md",
    "type": "file",
    "content": "# Terminal Interface\r\n\r\nA modern terminal interface built with React and TypeScript that provides an interactive way to browse and explore projects.\r\n\r\n## Features\r\n\r\n- Three-panel layout with directory tree, terminal, and details panel\r\n- Command history and auto-completion\r\n- Project details with architecture diagrams\r\n- Responsive design with dark theme\r\n\r\n## Available Commands\r\n\r\n- `help` - Show available commands\r\n- `clear` - Clear the terminal\r\n- `about` - Show information about the terminal\r\n- `projects` - List available projects\r\n- `contact` - Show contact information\r\n- `ls` - List directory contents\r\n- `cd` - Change directory\r\n- `pwd` - Print working directory\r\n- `cat` - Read file contents\r\n- `echo` - Print text\r\n- `neofetch` - Display system information\r\n- `exit` - Close the terminal\r\n\r\n## Development Setup\r\n\r\n1. Clone the repository:\r\n```bash\r\ngit clone https://github.com/yourusername/terminal-interface.git\r\ncd terminal-interface\r\n```\r\n\r\n2. Install dependencies:\r\n```bash\r\nnpm install\r\n```\r\n\r\n3. Start the development server:\r\n```bash\r\nnpm start\r\n```\r\n\r\n4. Run tests:\r\n```bash\r\nnpm test\r\n```\r\n\r\n5. Run tests in watch mode:\r\n```bash\r\nnpm run test:watch\r\n```\r\n\r\n6. Generate test coverage report:\r\n```bash\r\nnpm run test:coverage\r\n```\r\n\r\n## Project Structure\r\n\r\n```\r\nsrc/\r\n├── components/\r\n│   └── Terminal/\r\n│       ├── Terminal.tsx\r\n│       └── Terminal.styles.ts\r\n├── hooks/\r\n│   └── useTerminal.ts\r\n├── services/\r\n│   └── commands.ts\r\n├── styles/\r\n│   ├── theme.ts\r\n│   ├── ThemeProvider.tsx\r\n│   └── globalStyles.ts\r\n├── types/\r\n│   └── index.ts\r\n├── data/\r\n│   └── testProjects.ts\r\n└── __tests__/\r\n    ├── Terminal.test.tsx\r\n    ├── commands.test.ts\r\n    └── useTerminal.test.ts\r\n```\r\n\r\n## CI/CD\r\n\r\nThe project uses GitHub Actions for continuous integration:\r\n- Tests run automatically on each push to main branch\r\n- Tests run on pull requests to main branch\r\n- Uses Node.js 18.x\r\n- Caches npm dependencies for faster builds\r\n\r\n## License\r\n\r\nMIT "
  },
  "package.json": {
    "name": "package.json",
    "type": "file",
    "content": "{\r\n  \"name\": \"terminal-interface\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"A modern terminal interface built with React and TypeScript\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"start\": \"webpack serve --mode development\",\r\n    \"build\": \"webpack --mode production\",\r\n    \"test\": \"jest\",\r\n    \"test:watch\": \"jest --watch\",\r\n    \"test:coverage\": \"jest --coverage\",\r\n    \"lint\": \"eslint src --ext .ts,.tsx\",\r\n    \"format\": \"prettier --write \\\"src/**/*.{ts,tsx}\\\"\"\r\n  },\r\n  \"keywords\": [\r\n    \"terminal\",\r\n    \"react\",\r\n    \"typescript\",\r\n    \"styled-components\"\r\n  ],\r\n  \"author\": \"\",\r\n  \"license\": \"MIT\",\r\n  \"dependencies\": {\r\n    \"react\": \"^18.2.0\",\r\n    \"react-dom\": \"^18.2.0\",\r\n    \"styled-components\": \"^6.0.7\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.22.10\",\r\n    \"@babel/preset-env\": \"^7.22.10\",\r\n    \"@babel/preset-react\": \"^7.22.10\",\r\n    \"@babel/preset-typescript\": \"^7.22.10\",\r\n    \"@testing-library/jest-dom\": \"^6.1.4\",\r\n    \"@testing-library/react\": \"^14.0.0\",\r\n    \"@types/jest\": \"^29.5.5\",\r\n    \"@types/node\": \"^20.5.7\",\r\n    \"@types/react\": \"^18.2.21\",\r\n    \"@types/react-dom\": \"^18.2.7\",\r\n    \"@types/styled-components\": \"^5.1.34\",\r\n    \"babel-loader\": \"^9.1.3\",\r\n    \"css-loader\": \"^6.8.1\",\r\n    \"eslint\": \"^8.47.0\",\r\n    \"eslint-config-prettier\": \"^9.0.0\",\r\n    \"eslint-plugin-prettier\": \"^5.0.0\",\r\n    \"eslint-plugin-react\": \"^7.33.2\",\r\n    \"eslint-plugin-react-hooks\": \"^4.6.0\",\r\n    \"html-webpack-plugin\": \"^5.5.3\",\r\n    \"identity-obj-proxy\": \"^3.0.0\",\r\n    \"jest\": \"^29.6.2\",\r\n    \"jest-environment-jsdom\": \"^29.7.0\",\r\n    \"prettier\": \"^3.0.2\",\r\n    \"style-loader\": \"^3.3.3\",\r\n    \"ts-jest\": \"^29.1.1\",\r\n    \"ts-loader\": \"^9.5.2\",\r\n    \"typescript\": \"^5.2.2\",\r\n    \"webpack\": \"^5.88.2\",\r\n    \"webpack-cli\": \"^5.1.4\",\r\n    \"webpack-dev-server\": \"^4.15.2\"\r\n  }\r\n}\r\n"
  },
  "tsconfig.json": {
    "name": "tsconfig.json",
    "type": "file",
    "content": "{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es6\",\r\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\r\n    \"allowJs\": true,\r\n    \"skipLibCheck\": true,\r\n    \"esModuleInterop\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"strict\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"module\": \"esnext\",\r\n    \"moduleResolution\": \"node\",\r\n    \"resolveJsonModule\": true,\r\n    \"isolatedModules\": true,\r\n    \"noEmit\": false,\r\n    \"jsx\": \"react-jsx\",\r\n    \"baseUrl\": \"src\",\r\n    \"paths\": {\r\n      \"@/*\": [\"*\"]\r\n    }\r\n  },\r\n  \"include\": [\"src\"],\r\n  \"exclude\": [\"node_modules\"]\r\n} "
  }
}